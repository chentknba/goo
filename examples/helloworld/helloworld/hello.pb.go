// Code generated by protoc-gen-go.
// source: helloworld/hello.proto
// DO NOT EDIT!

/*
Package helloworld is a generated protocol buffer package.

It is generated from these files:
	helloworld/hello.proto

It has these top-level messages:
	Request
	Response
*/
package helloworld

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Response struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "helloworld.Request")
	proto.RegisterType((*Response)(nil), "helloworld.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HelloWorld service

type HelloWorldClient interface {
	Hello(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_HelloClient, error)
}

type helloWorldClient struct {
	cc *grpc.ClientConn
}

func NewHelloWorldClient(cc *grpc.ClientConn) HelloWorldClient {
	return &helloWorldClient{cc}
}

func (c *helloWorldClient) Hello(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_HelloClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HelloWorld_serviceDesc.Streams[0], c.cc, "/helloworld.HelloWorld/Hello", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldHelloClient{stream}
	return x, nil
}

type HelloWorld_HelloClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type helloWorldHelloClient struct {
	grpc.ClientStream
}

func (x *helloWorldHelloClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloWorldHelloClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for HelloWorld service

type HelloWorldServer interface {
	Hello(HelloWorld_HelloServer) error
}

func RegisterHelloWorldServer(s *grpc.Server, srv HelloWorldServer) {
	s.RegisterService(&_HelloWorld_serviceDesc, srv)
}

func _HelloWorld_Hello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloWorldServer).Hello(&helloWorldHelloServer{stream})
}

type HelloWorld_HelloServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type helloWorldHelloServer struct {
	grpc.ServerStream
}

func (x *helloWorldHelloServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloWorldHelloServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HelloWorld_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.HelloWorld",
	HandlerType: (*HelloWorldServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Hello",
			Handler:       _HelloWorld_Hello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helloworld/hello.proto",
}

func init() { proto.RegisterFile("helloworld/hello.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0xcb, 0x48, 0xcd, 0xc9,
	0xc9, 0x2f, 0xcf, 0x2f, 0xca, 0x49, 0xd1, 0x07, 0x33, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85,
	0xb8, 0x10, 0xe2, 0x4a, 0xca, 0x5c, 0xec, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x12,
	0x5c, 0xec, 0x05, 0x89, 0x95, 0x39, 0xf9, 0x89, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41,
	0x30, 0xae, 0x92, 0x0a, 0x17, 0x47, 0x50, 0x6a, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0x2a, 0x6e, 0x55,
	0x46, 0x6e, 0x5c, 0x5c, 0x1e, 0x20, 0x83, 0xc3, 0x41, 0x06, 0x0b, 0x59, 0x70, 0xb1, 0x82, 0x79,
	0x42, 0xc2, 0x7a, 0x08, 0xeb, 0xf4, 0xa0, 0x76, 0x49, 0x89, 0xa0, 0x0a, 0x42, 0xcc, 0x56, 0x62,
	0xd0, 0x60, 0x34, 0x60, 0x4c, 0x62, 0x03, 0xbb, 0xd2, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x98,
	0xfb, 0xad, 0x71, 0xbf, 0x00, 0x00, 0x00,
}
